.\"   $Id$
.\"
.\"   Man page for the aspic project.
.\"
.\"   $Log$
.\"

.TH libaspic 3 "Dec 5, 2013" "version 0.3.2" "Aspic usage"

.SH NAME
libaspic - a scientific
.I
fortran
library dedicated to (a)ccurate (s)low-roll (p)redictions for
(i)nflationary (c)osmology.

.SH SYNOPSIS
.I
libaspic
is a collection of fortran modules, distributed as a shared and static
library, which provides various computational functions associated
with well known models of inflation. The list of models, modules and
available functions, as well as their usage, are detailed below.
.P
In order to access the library, it has to be linked to your code
by using the
.I -l
flag during compilation, i.e. by appending the command
.B -laspic
to the others flags. Inside your source code, all modules and their
associated routines can be imported from a global include file that is
accessible in fortran by the command:
.IP
.B include 'aspic.h'
.P
or using the C pre-processor with
.IP
.B #include <aspic.h>
.P
Both the library and the global include file are installed in the
standard directory you specified when installing the
library. Compiling your own source file with, for instance, gfortran
should only require:
.IP
gfortran -c mysrcfile.f90
.RS
gfortran mysrcfile.o -o myprog
.B -laspic
.RE
.P
In case you have installed the library and modules in a non-standard
location, you can use the
.I -I
command line flag for specifying the default include and module
directory. The same remark holds for the path to the library itself, which
can be specified with the
.I -L
command line flag. Compiling with
gfortran would now read:
.IP
gfortran -I/usr/include/aspic -c mysrcfile.f90
.RS
gfortran -L/usr/lib64 mysrcfile.o -o myprog
.B -laspic
.RE
.P
Alternatively, you can decide to only import one (or more) specific
module with a subset of its associated routines with the fortran
instruction 'use'. As an example, accessing the first and second Hubble flow
functions for the models 'foo' reads:

.IP
.B use foosr, only : foo_epsilon_one, foo_epsilon_two



.SH DESCRIPTION
.I libaspic
is a library for computing various 
.I observable
quantities used in Cosmology from definite single field inflationary
models.  It aims at providing an efficient, extendable and accurate way
of comparing theoretical predictions with cosmological data. As the
list of inflationary models is always increasing, you are encouraged
to add support for any model that would not yet be implemented; see
section
.B ADDING A MODEL.
.P
By observable quantities, we currently refer to as the Hubble flow
functions, up to second order in the slow-roll approximation, which
are in direct correspondence with the spectral index, tensor-to-scalar
ratio and the running of the primordial power spectrum. The library
also provides the field potential, its first and second derivatives,
the energy density at the end of inflation, the energy density at the
end of reheating, and the field value (or e-fold value) at which the
pivot scale crossed the Hubble radius during inflation. All these
quantities are computed in a way which is consistent with the
existence of a reheating phase. Some functions may therefore requires
as an input both the amplitude of the scalar perturbations and the
mean equation of state during reheating.

.SH EXAMPLES

For each all the models implemented, assuming its acronym to be 'foo',
the source tarball contains a worked out example, 'foomain.f90', which
calls the library to extract the spectral index and tensor-to-scalar
ratio scanning all possible reheating energy scales. These example
codes are not compiled by default as they are for debugging and
pedagogical purposes only. Their compilation can be forced by using
.IP
make check
.P
when building libaspic from the tarball source file. All these programs
are automatically compiled and executed by a
.IP
make test
.P
that will return an error message if one of them aborts unexpectedly.

.SH LIST OF MODULES AND ROUTINES

For a given inflationary model, let's say 'foo' inflation, 
.I libaspic
provides two modules
.B foosr
and
.B fooreheat
respectively dedicated to slow-roll and reheating related
functions. These modules make use of common modules that you should
not need for standard usage but that you must call if you decide to
add a new model.

.SS SLOW-ROLL MODULE

The
.B foosr
module exposes the following
.I public functions
of kind
.I real(kp)
.IP
.BR foo_norm_potential (x,...)
.RS
.BR foo_norm_deriv_potential (x,...)
.RE
.RS
.BR foo_norm_deriv_second_potential (x,...)
.RE
.RS
.BR foo_epsilon_one (x,...)
.RE
.RS
.BR foo_epsilon_two (x,...)
.RE
.RS
.BR foo_epsilon_three (x,...)
.RE
.RS
.BR foo_x_endinf (...)
.RE
.RS
.BR foo_efold_primitive (x,...)
.RE
.RS
.BR foo_x_trajectory (N-Nend,xend,...)
.RE
.P
All these functions take as an input the dimensionless field value
.B 'x'
and/or a relative e-fold number
.B 'N'
and some extra model parameter values, all of the kind
.IR real(kp) .
The field values
.B 'x'
are usually assumed to be in reduced Planck mass units. For some
specific models, the unit may however be in another more relevant
energy scale. Please check out the explicit list of models below,
their respective man pages (man
.BR aspic_foo (3))
or the header of the module file 'foosr.f90' for more details. Each of
these functions usually requires some additional input, referred to
as '...'  above, which are the (dimensionless) potential parameter
values. Again, their number, units and kind can be either found in the
man pages or in the header of the module file 'foosr.f90'.

The first three functions return the
.I normalized
field potential and its
derivatives with respect to the input variable 'x'. They
.I do not
include any multiplicative
factor (such as M^4) because it is always uniquely determined by the
amplitude of the cosmological perturbations. As such, the
normalization is never counted as a model parameter in the
classification below.  The next three functions, the ones containing the
wording
.B 'epsilon'
in their name, return the value of the three first Hubble flow
functions at leading order (the so-called 'epsilonV' functions)
.P
Finally, the last three functions allows to determine
uniquely the slow-roll trajectory at leading order. Calling
.BR foo_x_endinf ()
returns the field value
.B 'xend'
at the end of inflation. For most models, this happens when the first
Hubble flow function equals unity but it can also be given by more
specific mechanisms. Notice that, for some models, the end of
inflation may be an extra model parameter. For those, this function is
obviously not provided. The function
.BR foo_efold_primitive ()
returns, up to a constant, the value of the integral
.B SUM{V(x)/V'(x)dx}
from which the slow-roll trajectory can be calculated. This is
precisely the output of
.BR foo_x_trajectory ()
which returns the field value
.B 'x'
from the input of
.B 'xend'
and the number of e-folds 
.B 'N-Nend'
before the end of inflation at which you want this value.


.SS REHEATING MODULES

The
.B fooreheat
module exposes the following
.I public functions
of kind
.I real(kp)
.IP
.BR foo_lnrhoreh_max (...,Pstar)
.RS
.BR foo_x_star (...,w,lnRhoReh,Pstar)
.RE
.RS
.BR foo_x_star (...,w,lnRhoReh,Pstar,
.B deltaNstar)
.RE
.RS
.BR foo_x_rrad (...,lnRrad,Pstar)
.RE
.RS
.BR foo_x_rrad (...,lnRrad,Pstar,
.B deltaNstar)
.RE
.RS
.BR foo_x_rreh (...,lnR)
.RE
.RS
.BR foo_x_rreh (...,lnR,
.B deltaNstar)
.RE
.P
These functions take as first arguments the dimensionless potential
parameters '...' as specified in the man pages
.BR aspic_foo (3)
and in the header of the module files 'foosr.f90' and 'fooreheat.f90'.
.P
The function
.BR foo_lnrhoreh_max ()
returns the natural logarithm of the total energy density of the
universe at the end of reheating when it occurs instantaneously at the
end of inflation. There, this is also the energy density at the end of
inflation when reheating is instantaneous, or radiation
dominated. This number depending on the physical normalization of the
potential, you need to input
.B 'Pstar'
the measured amplitude of the scalar power spectrum evaluated at 
.B 'kstar'
the pivot wave-number. Its default value has been set to 0.05 Mpc^-1
(see below for specifying another value).

The function
.BR foo_x_star ()
returns the field value
.B 'xstar'
at which the pivot wave-number
.B 'kstar'
crossed the Hubble radius during inflation. Plugging this field value
into the Hubble flow functions immediately gives the
.I observable
slow-roll parameters, spectral index, running, tensor-to-scalar
ratio. As an input, this function requires some assumptions on how the
reheating proceeded. It needs the mean equation of state parameter
.B 'w'
during (pre)reheating, together with the logarithm of total energy density
.B 'lnRhoReh'
of the universe when the reheating ends. Finally, in order to
determine the correct normalization of the inflationary potential, you
have to input
.B 'Pstar'
again. The same routine can be called with an additional 
.I real(kp), optional, intent(out)
argument
.B 'deltaNstar'
which contains on return the value of 'Nstar-Nend', the number of
e-folds before the end of inflation at which the pivot wave-number
crossed the Hubble radius (negative).

The functions
.BR foo_x_rrad ()
and
.BR foo_x_rreh ()
are in all points similar to the previous one, i.e. they return the field value
.B 'xstar'
at which the pivot wave-number
.B 'kstar'
crossed the Hubble radius during inflation. They take as input the
reheating parameter 'lnRrad', or the rescaled reheating
parameter 'lnR', respectively. These parametrizations are most generic
as they are the combination of reheating parameters the CMB is
sensitive to. For more details, see the references below.

The
.B srreheat
module is not model specific and its source files are located under
the directory 'src/common/'. Unless otherwise specified, this module
exposes
.I functions
of kind
.I real(kp)
which are called by all the above-described modules. As such their
usage should be necessary only if you decide to add a new model:
.IP
.I logical ::
.BR slowroll_validity (epsOne,epsTwo)
.RE
.RS
.BR potential_normalization (Pstar,epsOneStar,Vstar)
.RE
.RS
.BR primscalar (M,epsOneStar,Vstar)
.RE
.RS
.BR log_energy_reheat_ingev (lnRhoReh)
.RE
.RS
.BR ln_rho_endinf (Pstar,epsOneStar,epsOneEnd,VendOverVstar)
.RE
.RS
.BR ln_rho_reheat (w,Pstar,epsOneStar,epsOneEnd,deltaNstar,VendOverVstar)
.RE
.RS
.BR find_reheat (nuStar,calFplusNuEnd,w,epsStar,Vstar)
.RE
.RS
.BR get_calfconst (lnRhoReh,Pstar,w,epsEnd,potEnd)
.RE
.RS
.BR find_reheat_rrad (nuStar,calFplusNuEnd,epsStar,Vstar)
.RE
.RS
.BR get_calfconst_rrad (lnRrad,Pstar,epsEnd,potEnd)
.RE
.RS
.BR find_reheat_rreh (nuStar,calFplusNuEnd,Vstar)
.RE
.RS
.BR get_calfconst_rreh (lnR,epsEnd,potEnd)
.RE
.RS
.BR get_lnrrad_rhow (lnRhoReh,w,lnRhoEnd)
.RE
.RS
.BR get_lnrreh_rhow (lnRhoReh,w,lnRhoEnd)
.RE
.RS
.BR get_lnrrad_rreh (lnR,lnRhoEnd)
.RE
.RS
.BR get_lnrreh_rrad (lnRrad,lnRhoEnd)
.RE
.P
All of these functions take as input
.I real(kp)
kind arguments. The first function
.BR slowroll_validity ()
returns
.I .true.
or
.I .false.
according to the values of the first and second Hubble flow functions
to assess the validity of the slow-roll approximation and numerical
precision.
The second function
.BR potential_normalization ()
returns the potential normalization factor required to get the correct
amplitude of the CMB anisotropies. This factor is commonly denoted
as 'M^4' and this function returns the mass scale 'M' in
Planck units. Conversely, the function
.BR primscalar ()
returns the amplitude of the primordial scalar perturbations at the
pivot scale from the input of the potential mass scale 'M'.
The next function
.BR log_energy_reheat_ingev ()
is for convenience and simply returns the logarithm in base 10 of the
energy density at the end of reheating from the its natural
logarithmic value in Planck units (used elsewhere). The next functions
are at the root of the reheating related calculations and are fully
model independent. The function
.BR ln_rho_endinf ()
returns the logarithm of the energy density at the end of inflation,
.B ln_rho_reheat()
returns the logarithm of the energy density at the end of reheating,
while
.BR find_reheat ()
and
.BR get_calfconst ()
solve algebraic equations necessary to get the reheating parameter
assuming slow-roll. For more details on what are these quantities, see
the references at the end of this section. The next four functions
equally solve the reheating equations but take as input either the
reheating parameter 'lnRrad', or the rescaled one 'lnR'. Finally, the
last four functions allow to pass from one reheating variable to the
others. For instance,
.BR get_lnrrad_rhow ()
gives the reheating parameter 'lnRrad' from the value of 'lnRhoReh'
and 'w'. Notice that the energy scale at which inflation
ends, 'lnRhoEnd', is a required input for all the conversion functions
but can be computed with 
.BR ln_rho_endinf ().

.P
All these routines are valid for any slow-roll inflationary
models. The quantity 'Pstar' stands for the primordial power spectrum
amplitude at the pivot, 'w' the mean equation of state during
(pre)reheating, 'epsOneStar' and 'epsOneEnd' are the first Hubble flow
function respectively evaluated at the time the pivot mode crossed the
Hubble radius during inflation, and at the end of inflation. The
argument 'VendOverVstar' is the ratio between the field potential,
evaluated at those two times. All those arguments are of
.I real(kp)
kind.

The
.B srflow
module provides some potentially useful functions to get other
cosmological observables as well as higher order corrections on the
Hubble flow functions. Its source file is located under the
directory 'src/common/'. In particular, the module has the public
.I functions
of kind
.I real(kp)
.IP
.BR scalar_spectral_index (epsH)
.RE
.RS
.BR tensor_to_scalar_ratio (epsH)
.RE
.RS
.BR scalar_running (epsH)
.RE
.P
All of these functions take as input a
.IP
.I real(kp), dimension (:) ::
epsH
.RS
.RE
.P
vector assumed to contain the value of the successive Hubble flow
parameters 'epsilonH_i', with 'i' increasing. The calculations are
consistent with the size of the input vector. For instance, calling
.BR scalar_spectral_index ()
with a dimension two vector containing the values of the first and
second Hubble flow parameters returns the spectral index computed at
first order in a Hubble flow expansion. If you input a dimension three
vector, the calculations are performed at second order. The same holds
for the tensor-to-scalar ratio and the running of the spectral index
(which is non-zero at second order only).

.B References:
.IP
.UR http://arxiv.org/abs/1303.3787
arXiv:1303.3787 (section 2.2)
.UE
.RS
.UR http://arxiv.org/abs/1302.6013
arXiv:1302.6013 (section 2.2)
.UE
.RS
.RE
.UR http://arxiv.org/abs/1301.1778
arXiv:1301.1778 (section IIA)
.UE
.RS
.RE
.UR http://arxiv.org/abs/1202.3022
arXiv:1202.3022 (section 2)
.UE
.RS
.RE
.UR http://arxiv.org/abs/1009.4157
arXiv:1009.4157 (section IIB)
.UE
.RS
.RE
.UR http://arxiv.org/abs/1004.5525
arXiv:1004.5525 (whole paper)
.UE
.RS
.RE
.UR http://arxiv.org/abs/0711.4307
arXiv:0711.4307 (section 2.4)
.UE
.RS
.RE
.UR http://arxiv.org/abs/astro-ph/0703486
astro-ph/0703486 (section 4.1)
.UE
.RS
.RE
.UR http://arxiv.org/abs/astro-ph/0605367
astro-ph/0605367 (section 4.1)
.UE
.RE

.SS COSMOPAR MODULE

The
.B cosmopar
module exposes some
.I public parameters
of the kind
.I real(kp)
which encodes some measured cosmological parameters today, or
observational choices such as the pivot scale. More explicitly, they are
.IP
.B HubbleSquareRootOf3OmegaRad
.RE
.RS
.B HubbleSquareRootOf2OmegaRad
.RE
.RS
.B RelatDofRatio
.RE
.RS
.B lnRhoNuc                   
.RE
.RS
.B lnMpcToKappa
.RE
.RS
.B lnMpinGeV
.RE
.RS
.B QrmsOverT
.RE
.RS
.B kpivot
.RE
.RS
.B PowerAmpScalar
.RE

.P
The first two are the Hubble parameter today times the square root of
the double (or triple) density parameter of radiation today, the
second is the ratio between the number of entropic relativistic
species at the end of reheating and today (gives only small
corrections). The constant
.B lnRhoNuc
stands for the natural logarithm of the energy density of the universe
just before Big-Bang Nucleosynthesis. Next
.B lnMpcToKappa
is the logarithm of the Einstein equation coupling (8piG/c^4) expressed in mega-parsecs.
The parameter
.B lnMpinGev
is the reduced Planck mass in GeV,
.B QrmsOverT
stands for the effective quadrupole moment,
.B kpivot
is the pivot scale at which the amplitude of the scalar primordial
power spectrum is measured. A default amplitude is stored in the parameter
.B PowerAmpScalar
(mean value from PLANCK 2013), that very same quantity has been referred to
as 'Pstar' in some functional arguments above. The effective
quadrupole moment 'QrmsOverT' is such that the amplitude of the power
spectrum matches 'Pstar'. As such it may not correspond to the real
quadrupole moment, which is still slightly lower :-).
.P
Notice that changing any of these constants requires edition of the source
file 'src/common/cosmopar.f90' and a recompilation of the whole
library.



.SS UTILITY MODULES

Finally,
.I libaspic
comes with some utility modules that you may find useful in performing some
specific computations.
.P
The
.B inftools
module exposes some
.I public subroutines
which are various modified Runge-Kutta numerical integrators based on the
subroutine
.BR dverk ().
The
.B specialinf
module exposes some special functions arising by analytically
integrating some slow-roll trajectories.
The
.B hyp_2f1_module
module exposes various
.I functions
and
.I subroutines
dedicated to the computation of the Gauss hyper-geometric function. All
source files are located under the 'src/common/' directory.


.SH LIST OF MODELS
At the time of this writing,
.I libaspic
deals with the inflationary models listed below. Their respective
potential parameters, conventions for field units and so on, are
described in their man pages
.BR aspic_foo (3).
.SS ZERO PARAMETER MODELS
.TP 20
.B
Acronym
.B
Model name
.TQ
.I hi
Higgs inflation

.SS ONE PARAMETER MODELS
.TP 20
.B
Acronym
.B
Model name
.TQ
.I rchi
radiatively corrected Higgs inflation
.TQ
.I lfi
large field inflation
.TQ
.I mlfi
mixed large field inflation
.TQ
.I rcmi
radiatively corrected massive inflation
.TQ
.I rcqi
radiatively corrected quartic inflation
.TQ
.I ni
natural inflation
.TQ
.I esi
exponential SUSY inflation
.TQ
.I pli
power law inflation
.TQ
.I kmii
Kahler moduli inflation I
.TQ
.I hf1i
horizon flow inflation at first order
.TQ
.I cwi
Coleman-Weinberg inflation
.TQ
.I li
global SUSY with loop inflation
.TQ
.I rpi1
R + R^2p inflation I
.TQ
.I dwi
double well inflation
.TQ
.I mhi
mutated hilltop inflation
.TQ
.I rgi
radion gauge inflation
.TQ
.I mssmi
minimal supersymmetric model inflation
.TQ
.I ripi
renormalizable inflection point inflation
.TQ
.I ai
arctan inflation
.TQ
.I cnai
constant spectral index inflation A
.TQ
.I cnbi
constant spectral index inflation B
.TQ
.I osti
open string tachyonic inflation
.TQ
.I wri
Witten-O'Raifeartaigh inflation
.TQ
.I ccsi1
Cublicly corrected Starobinski inflation I
.TQ
.I ccsi3
Cublicly corrected Starobinski inflation III


.SS TWO PARAMETERS MODELS
.TP 20
.B Acronym
.B Model name
.TQ
.I sfi
small field inflation
.TQ
.I ii
intermediate inflation
.TQ
.I kmiii
Kahler moduli inflation II
.TQ
.I lmi1
logamediate inflation I
.TQ
.I rpi2
R + R^2p inflation II
.TQ
.I rpi3
R + R^2p inflation III
.TQ
.I twi
twisted inflation
.TQ
.I hf2i
horizon flow inflation at second order
.TQ
.I gmssmi
generalized minimal supersymmetric model inflation
.TQ
.I gripi
generalized renormalizable point inflation
.TQ
.I bsusybi
brane SUSY breaking inflation
.TQ
.I ti
tip inflation
.TQ
.I bei
beta exponential inflation
.TQ
.I psni
pseudo natural inflation
.TQ
.I ncki
non-canonical Kahler inflation
.TQ
.I csi
constant spectrum inflation
.TQ
.I oi
orientifold inflation
.TQ
.I cnci
constant spectral index inflation C
.TQ
.I sbi
supergravity brane inflation
.TQ
.I ssbi1 
spontaneous symmetry breaking inflation I
.TQ
.I ssbi2
spontaneous symmetry breaking inflation II
.TQ
.I ssbi3
spontaneous symmetry breaking inflation III
.TQ
.I ssbi4
spontaneous symmetry breaking inflation IV
.TQ
.I ssbi5
spontaneous symmetry breaking inflation V
.TQ
.I ssbi6
spontaneous symmetry breaking inflation VI
.TQ
.I imi
inverse monomial inflation
.TQ
.I bi
brane inflation
.TQ
.I kklti
KKLT inflation
.TQ
.I nfi1
N-formalism inflation I
.TQ
.I nfi3
N-formalism inflation III
.TQ
.I ccsi2
Cublicly corrected Starobinski inflation II

.SS THREE PARAMETERS MODELS
.TP 20
.B Acronym
.B Model name
.TQ
.I lmi2
logamediate inflation II
.TQ
.I rmi1
running mass inflation I
.TQ
.I rmi2
running mass inflation II
.TQ
.I rmi3
running mass inflation III
.TQ
.I rmi4
running mass inflation IV
.TQ
.I vhi
valley hybrid inflation
.TQ
.I dsi
dynamical supersymmetric inflation
.TQ
.I gmlfi
generalized mixed large field inflation
.TQ
.I lpi1
logarithmic potential inflation I
.TQ
.I lpi2
logarithmic potential inflation II
.TQ
.I lpi3
logarithmic potential inflation III
.TQ
.I cndi
constant spectral index inflation D
.TQ
.I nfi2
N-formalism inflation II
.TQ
.I nfi4
N-formalism inflation IV

.SH ADDING A MODEL
Before deciding to add a model, you should first check that its
potential is not already encoded within the existing modules. From our
experience, it is frequent in the literature that different
theoretical motivations lead to exactly the same effective
potential. As a result, identical models often share different
names. If you encounter such a situation, please let us know, or even
better, send us an updated man page for the relevant module by adding
the alternative names under which this potential is known.

.P
In the opposite situation, importing a new model, let's say 'convoluted wow
loop inflation', of acronym
.I wowi
is equivalent to write the source codes of the two modules
.B wowisr
and
.B wowireheat
as well as updating various autoconf files, namely 'Makefile.am'
and 'configure.ac', and finally writing a very short documentation.



This can be done step by step along the following
lines:

.IP \(bu
Create the sub-directory 'src/wooi' containing five new
files, 'wooimain.f90', 'wooisr.f90', 'wooireheat.f90', 'aspic_wooi.3'
and 'Makefile.am'.

.IP \(bu
Edit the file 'Makefile.am' such as it now reads
.HP 20
.EX
SRC = wooisr.f90 wooireheat.f90
MOD = wooisr.$(FC_MODEXT) wooireheat.$(FC_MODEXT)

check_PROGRAMS = wooimain
wooimain_SOURCES = $(SRC) wooimain.f90
wooimain_FCFLAGS = -I../$(SRCOMMDIR)
wooimain_LDADD = ../$(SRCOMMDIR)/libsrcommon.a

noinst_LTLIBRARIES = libwooi.la
libwooi_la_SOURCES = $(SRC)
libwooi_la_FCFLAGS = -I../$(SRCOMMDIR) $(AM_FCFLAGS)
libwooi_la_includedir = $(includedir)/$(SRINCDIR)
libwooi_la_include_HEADERS = $(MOD)

man_MANS = aspic_wooi.3

clean-local: clean-modules clean-outfiles
clean-modules:
        test -z "$(FC_MODEXT)" || $(RM) *.$(FC_MODEXT)
clean-outfiles:
        test -z "$(DATEXT)" || $(RM) *.$(DATEXT)
\ .NOTPARALLEL:
.EE
.RE

.IP \(bu
Edit the files 'wooisr.f90' and 'wooireheat.f90' such that they
respectively provide the
.B wooisr
and
.B wooireheat
modules and their respective
.I public functions
starting with the
.I wowi
acronym. The best way to do this is to copy-paste the files of one of
the existing model and modify them accordingly. You must use the
already common routines for this, such as
.B zbrent()
is you need to solve algebraic equations or
.B get_calfconst()
and
.B find_reheat()
to solve for the reheating. You may also need some special functions
that are already encoded in the
.B specialinf
module. In the unlikely situation in which you would need a special
function or another solver, you should add it into the relevant
modules (located in 'src/common') and render
.I public
those new functions.

.IP \(bu
Write the test program 'wooimain.f90' to check that your code is
actually working and produce sensible results. Again you may be
inspired by the already encoded models.

.IP \(bu
Document your model, i.e. write the mini man page in the
file 'aspic_wooi.3' summarizing the potential functional shape, the
number and kind of the parameters, as well as the physical units
used.

.IP \(bu
Add your model to the library by editing the parent
Makefile 'src/Makefile.am'. Update the environment variable
libaspic_la_LIBADD by adding the line 'wooi/libwooi.la' and append to
SUBDIRS the name of the new sub-directory 'wooi'.

.IP \(bu
Finally, edit the global 'configure.ac' file and run the command
.I autoreconf
such that the autoconf tools can automatically generate the various
makefiles.
.P
And send us your code, we will be happy to add it, as your name, in
the next release of
.I libaspic


.SH NOTES
.P
Please help us to maintain this library readable. As such, we strongly
encourage the use of
.I modern fortran
and will not accept routines written in f66 or f77. The only exception
might be for the fantastic two-century old hyper fast routines, under
the condition that you provide them enclosed into a module box with a
maximal amount of
.I private
routines. If you are not (yet) familiar with
.I fortran 90/95/03/08
and later revisions, check out the
.UR http://www.idris.fr/data/cours/lang/fortran
tutorials
.UE
from the IDRIS (in french).

.SH AUTHORS
.I libaspic
has been written by:
.TP 30
.B Name
.B Affiliation
.TQ
Jerome Martin
Institut d'Astrophysique de Paris (France)
.TQ
Christophe Ringeval
Centre for Cosmology, Particle Physics and Phenomenology, Louvain
University (Belgium)
.TQ
Vincent Vennin
Institut d'Astrophysique de Paris (France)

.SH REPORTING BUGS
Please contact us in case of bugs.
.SH COPYRIGHT
GNU GENERAL PUBLIC LICENSE Version 3

.SH SEE ALSO
.BR aspic_hi (3),
.BR aspic_lfi (3),
.BR aspic_rcmi (3),
.BR aspic_rcqi (3),
.BR aspic_ni (3),
.BR aspic_esi (3),
.BR aspic_pli (3),
.BR aspic_kmii (3),
.BR aspic_hf1i (3),
.BR aspic_cwi (3),
.BR aspic_li (3),
.BR aspic_rpi1 (3),
.BR aspic_dwi (3),
.BR aspic_mhi (3),
.BR aspic_rgi (3),
.BR aspic_mssmi (3),
.BR aspic_ripi (3),
.BR aspic_ai (3),
.BR aspic_cnai (3),
.BR aspic_cnbi (3),
.BR aspic_osti (3),
.BR aspic_wri (3),
.BR aspic_ccsi1 (3),
.BR aspic_ccsi3 (3).
.P
.BR aspic_sfi (3),
.BR aspic_ii (3),
.BR aspic_kmiii (3),
.BR aspic_lmi1 (3),
.BR aspic_rpi2 (3),
.BR aspic_rpi3 (3),
.BR aspic_twi (3),
.BR aspic_hf2i (3),
.BR aspic_gmssmi (3),
.BR aspic_gripi (3),
.BR aspic_bsusybi (3),
.BR aspic_ti (3),
.BR aspic_bei (3),
.BR aspic_psni (3),
.BR aspic_ncki (3),
.BR aspic_csi (3),
.BR aspic_oi (3),
.BR aspic_cnci (3),
.BR aspic_sbi (3),
.BR aspic_ssbi (3),
.BR aspic_imi (3),
.BR aspic_bi (3),
.BR aspic_kklti (3),
.BR aspic_nfi1 (3),
.BR aspic_nfi3 (3),
.BR aspic_ccsi2 (3).
.P
.BR aspic_lmi2 (3),
.BR aspic_rmi (3),
.BR aspic_vhi (3),
.BR aspic_dsi (3),
.BR aspic_gmlfi (3),
.BR aspic_lpi(3),
.BR aspic_cndi (3),
.BR aspic_nfi2 (3),
.BR aspic_nfi4 (3).
